/* 
    [ JS 리터럴 데이터 ]
        Number(숫자)    : 10 , 3.14 , 
        String(문자열)  : "유재석" , '강호동' , `신동엽`
        Boolean(논리)   : true , false
        undefined       : 값이 없다는 뜻

    [ 변수 ] : 하나의 자료/데이터 저장하는 메모리 공간
        1.let      : 변수를 선언하기 위한 키워드  
        2.변수명    : 메모리 공간의 상징적인 이름 
        3.=         : 오른쪽 항 을 왼쪽 항에 대입/넣는다.
        4.데이터    : 변수에 저장할 데이터 

    [ 상수 ] : 하나의 자료/데이터 저장하는 메모리 공간 ( 선언 이후에 수정 불가능 )
        1.const     : 상수를 선언하기 위한 키워드
        2.상수명    : 메모리 공간의 상징적인 이름 
        3. =        : 오른쪽 항 을 왼쪽 항에 대입/넣는다.
        4. 데이터   : 변수에 저장할 데이터
*/
let name = "유재석"         // [1]변수 선언
name                        // [2] 변수 가 갖는 (데이터) 반환 
name = "강호동"             // [3] 변수의 데이터 변경 
let name2 = name + 10;      // [4] 변수 가 갖는 데이터 와 다른 데이터와 연산 가능

const age = 40;             // [1] 상수 선언 
age                         // [2] 상수 가 갖는 (데이터) 반환 
age = 100                   // [3] 상수 의 데이터 변경 , 코드 에서는 문제가 없지만 , 실행 결과 오류가 출력된다.
// [27줄 오류] Assignment to constant variable. : 상수가 갖는 데이터는 변경 할 수 없다.

let age2 = age + 20;        // [4] 상수 가 갖는 데이터 와 다른 데이터와 연산 가능 

// [생각해보기1] 아래 코드에서 변수의 개수 와 리터럴의 개수 를 파악하시오.
let point1 = 50                 // 변수는 : point1   , 리터럴/값/데이터 : 50
let point2 = 100                // 변수는 : point2   , 리터럴/값/데이터 : 100 
let point3 = point1 + point2    // 변수는 : point3   , 리터럴/값/데이터 : 150  
    // 동시에 2개이상 연산을 불가능하다.
    // let point3 = point1 + point2 ( 연산 순서 )
    // [1] = 대입연산자 기준으로 오른쪽 코드 우선 ,
    // [2] 변수의 값 호출 , 50
    // [3] 변수의 값 호출 , 100
    // [4] + 연산자 , 50 + 100 => (리터럴) 150
    // [5] + 연산 결과를 왼쪽 항에 대입 , let point3 = 150
    // 결과 : 변수 3개 , 데이터 3개 

// [생각해보기2] 함수/연산 이란? 하나의 결과를 내는 작업 
// [생각해보기3] 변수명이 왜 필요한지? 중복값 배제
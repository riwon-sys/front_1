/*
    문자열 처리(기능이 없는 문자 그 자체) 방법
      1.
    키워드(문자 인데 기능 이 있는 문자들)
       'let' 
*/

// console.log( 유재석 ) // 유재석 is not defind

// console.log ==> 문자 (미리 정의된, 의미/기능이 포함된 문자 )
// 유재석 ==> 스크립트 회사에서 유재석 미리 정의 x )

// [1] 문자열 처리 
console.log( '유재석1' )
console.log( "유재석2" )
console.log( `유재석3`)
// [2] '작은따옴표 , " 큰따옴표 출력 
console.log( "유재석'반장'")
console.log( '유재석"반장"')
console.log( `유재석'반장"`)
// [3] 이스케이프/제어문자 , 키보드 엔터 위에 원화기호(백슬래시)\
    // 1. \n : console의 한줄 내림(줄바꿈)
    // 2. \" : "한개 출력  ,  \"\" 
    // 3. \' : '한개 출력  ,  \'\'
    // 4. \\ : \한개 출력  ,  \\\\
    // 5. \t : 탭(들여쓰기)
console.log( '유재석\n \'반장\'')
console.log( '유재석\n강호동' )
console.log( '유재석\"강호동' )
console.log( '유재석\'강호동' )
console.log( '유재석\\강호동' ) 
console.log( '유재석\t강호동' ) 

// [4] 문자열 템플릿(`백틱)템플릿
console.log( '유재석'  + '강호동' )           // '문자A' + '문자B' (연산과 함수는 항상 하나의 결과를 낸다.) => '문자A문자B'
console.log( '유재석' + 40 )                 // '문자A' + 숫자 => '문자A숫자'
console.log( '40' + '100' )                  // '숫자1'  + '숫자2' => '숫자1숫자2' // 40100
let age = 40;
console.log( '유재석' + age )                //  '문자A' + 변수명 => 유재석40
// console.log( '유재석' + 40 )
console.log( `유재석${age}강호동` )               // '문자A${JS코드}문자B` // 선언문은 불가;let
console.log( `평균 : ${ 100 + 50 }` )       // 평균 : 150

// 방법1 `문자그자체 문자그자체 문자그자체 ${JS코드} 문자그자체`
// 방법2 `문자그자체 문자그자체 문자그자체 + JS코드 + 문자그자체`
     // JS학습 목적 : html을 조작,제어,이벤트 하기 위해서 사용
     // HTML은 변수x , 연산x , 배열x , 타입x
     // HTML 에서 마크업을 작성 할 필요가 없다. JS에서 마크업을 입력하고 HTML을 출력하면 되기 때문에 > 리엑트.JS
     // JS 에서 HTML 작성시 JS 코드와 합쳐서 작성 할 수 있다.

let 직원명1 = '유재석'
let 직원명2 = '강호동'

let nameHTML = '<ol><li>유재석</li> <li>강호동</li></ol>'
// 또 다른 방법 : let nameHTML = `<ol><li> ${ 유재석 } </li> <li> ${ 강호동 } </li></ol>`
document.write( nameHTML ) // document.write( ) : 현재 HTML에 출력하는 함수

// 예1] : 입력받은 데이터를 html 출력하시오.
     //prompt('알림메세지') , 반환값 : 입력받은 값
prompt('[알림내용] 데이터 입력해주세요')
// prompt 함수로부터 입력받은 값을 아래 코드에서 재사용 하고 싶다.
console.log( 결과2 )
let infutHTML = ` <h3> 입력받은 데이터 : ${ 결과2 } </h3>`
document.write( infutHTML )

let 결과1 = 10 + 5  // 반환값 :  두 값을 더한 값 1개
// let 결과1 = 10 + 5
// 10 + 5 한 결과의 15를 아래 코드에서 재사용(연산 결과 저장하는 변수) 하고싶다.
console.log( 결과1 )

// 예2] : 2명의 사원이름을 입력받아서 아래와 같이 HTML(table)형식으로 출력하시오.
// 이유 : HTML은 연산X, 저장X 등등 없으므로 텍스트 그 자체
// 새로운 값 , 데이터를 입력 받아서 데이터 가공(JS) 하기 위해서 JS를 사용한다.
// 순서도(알고리즘) , 어떠한 작업의 순서 내지 절차 라고 함.
     // HTML과 CSS는 절차X , JS코드는 위에서 아래로 실행
     // 1. 1명의 사원이름을 입력 받는다.                        // prompt( ) , 반환값 :  입력받은 값
     // 2. 입력받은 사원이름을 변수에 저장한다.                 // let 사원1 = prompt( )
     // 3. 1명의 사원이름을 입력 받는다.                      // prompt( ) , 반환값 :  입력받은 값
     // 4. 입력받은 사원이름을 변수에 저장한다.               // let 사원2 = prompt( )
     // 5. 출력할 HTML형식의 문자로 출력 할 변수와 구성한다.  // let tableHTML = `<table> ~~</table>`
     // 6. 구성된 HTML형식의 문자를 HTML 문서에 출력한다.
     // - 변수를 사용하는 이유 : 다음 코드에서 사용(출력 목적)하려고
let 사원1 = prompt('사원명1 입력해주세요'); // [1][2] prompt( )함수를 사용하여 입력받은 값을 변수에 대입했다.
let 사원2 = prompt('사원명2 입력해주세요'); // [1][2] prompt( )함수를 사용하여 입력받은 값을 변수에 대입했다.
let 출력할내용 = `<talbe>
                        <tr>
                           <th> 번호 </th>  <th> 사원명 </th>
                        </tr>
                        <tr>
                          <td> 1 </td>  <td> ${ 사원1 } </td>
                        </tr>
                        <tr>
                          <td> 2 </td>  <td> ${ 사원2 } </td>
                        </tr>
                </table>`
document.write( 출력할내용 )

     /* 
      번호   이름
      1      유재석
      2      강호동
 */




      